# -*- coding: utf-8 -*-
"""google_stock_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13dFWxBZ4S2QuSAb1icEgIRmvhuFCwPDt
"""

import pandas as pd
import keras
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
import numpy as np

df_train=pd.read_csv("Google_Stock_Price_Train.csv")
df_test=pd.read_csv("Google_Stock_Price_Test.csv")

df_train.head()

training_open=df_train.iloc[:,1:2].values
sc=MinMaxScaler()
training_open=sc.fit_transform(training_open)

training_open[0:60]

x_train=[]
y_train=[]
for i in range(60,training_open.size):


  x_train.append(training_open[i-60:i].tolist())
  
  y_train.append([training_open[i][0]])

y_train=np.array(y_train)
x_train=np.array(x_train)

x_train[0]

x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))

model=keras.models.Sequential()

from keras.backend import dropout
model.add(keras.layers.InputLayer(input_shape=(60,1)))
model.add(keras.layers.LSTM(50,
    activation="relu",return_sequences=True,dropout=0.2))
model.add(keras.layers.LSTM(50,
    activation="relu",return_sequences=True,dropout=0.2))
model.add(keras.layers.LSTM(50,
    activation="relu",dropout=0.2))
model.add(keras.layers.Dense(1,
    activation="relu"))

model.compile(optimizer="adam",loss="MSE")

model.fit(x=x_train,y=y_train,batch_size=32,epochs=50,validation_split=0.2)

df_test

test_set=df_test.iloc[:,1:2].values

df_train.tail()

last_60_data=x_train[-1]

last_60_data=last_60_data.reshape((1,60,1))

last_60_data.shape

model.predict(last_60_data)

# np.append(np.array(last_60_data[0,1:61]),model.predict(last_60_data),axis=0)
last_60_data

for i in range(3):
  last_60_data=np.append(np.array(last_60_data[0,1:61]),model.predict(last_60_data),axis=0)
  last_60_data=last_60_data.reshape((1,60,1))

for i in range(20):
  last_60_data=np.append(np.array(last_60_data[0,1:61]),model.predict(last_60_data),axis=0)
  last_60_data=last_60_data.reshape((1,60,1))

last_60_data[0,40:60].size
last_60_data=sc.inverse_transform(last_60_data.reshape(60,1))

print(last_60_data[40:60])
from matplotlib import pyplot

ep=[]
for i in range(1,21):
  ep.append(i)
pyplot.plot(ep,last_60_data[40:60],'b',label="predict price")
pyplot.plot(ep,test_set,'g',label="actual")

